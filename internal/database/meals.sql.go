// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: meals.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
	"github.com/lib/pq"
)

const addIngredientsToMeal = `-- name: AddIngredientsToMeal :exec
INSERT INTO meal_ingredients (meal_id, ingredient_id)
SELECT $1, unnest($2::UUID[])
`

type AddIngredientsToMealParams struct {
	MealID  uuid.UUID
	Column2 []uuid.UUID
}

func (q *Queries) AddIngredientsToMeal(ctx context.Context, arg AddIngredientsToMealParams) error {
	_, err := q.db.ExecContext(ctx, addIngredientsToMeal, arg.MealID, pq.Array(arg.Column2))
	return err
}

const createMeal = `-- name: CreateMeal :one
INSERT INTO meals (id, created_at, updated_at, name)
VALUES ($1, $2, $3, $4)
RETURNING id
`

type CreateMealParams struct {
	ID        uuid.UUID
	CreatedAt time.Time
	UpdatedAt time.Time
	Name      string
}

func (q *Queries) CreateMeal(ctx context.Context, arg CreateMealParams) (uuid.UUID, error) {
	row := q.db.QueryRowContext(ctx, createMeal,
		arg.ID,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.Name,
	)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}
